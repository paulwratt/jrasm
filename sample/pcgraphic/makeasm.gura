#!/usr/bin/env gura
import(argopt)
import(jpeg)
import(png)
import(wx.show)

argopt.Parser {|p|
	p.addParam('cutlow', 'l', defValue => '0')
	p.addParam('cuthigh', 'h', defValue => '0')
	p.addFlag('show', 's')
	[cfg, argv] = p.parse(sys.argv)
}
if (argv.isempty()) {
	sys.stderr.println('usage: makeasm.gura imgfile')
	sys.exit(1)
}
fileNameSrc = argv[0]
fileNameDst = path.basename(fileNameSrc) + '.asm'
width = 32 * 8, height = 24 * 8
img = image(fileNameSrc)
cutLevelLow = int(cfg['cutlow'])
cutLevelHigh = int(cfg['cuthigh'])
sys.stderr.printf('filtered level: %d - %d\n', cutLevelLow, 255 - cutLevelHigh)
mapTbl1 = [consts(0, cutLevelLow), interval(0, 255, 256 - cutLevelLow - cutLevelHigh), consts(255, cutLevelHigh)]
mapTbl2 = [consts(0, 52), consts(64, 51), consts(128, 51), consts(192, 51), consts(255, 51)]
//mapTblNeg = range(255, 0)
mapTblNeg = range(0, 255)
img = img.resize(width / 2, height / 2).grayscale().mapcolorlevel(mapTblNeg).mapcolorlevel(mapTbl1).mapcolorlevel(mapTbl2)
imgDst = image(`rgb, width, height)
img.scan {|c, i|
	[xSrc, ySrc] = [i % (width / 2), int(i / (width / 2))]
	[xDst, yDst] = [xSrc * 2, ySrc * 2]
	if (c.r < 64) {
		imgDst.putpixel(xDst,     yDst, color.black)
		imgDst.putpixel(xDst + 1, yDst, color.black)
		imgDst.putpixel(xDst,     yDst + 1, color.black)
		imgDst.putpixel(xDst + 1, yDst + 1, color.black)
	} elsif (c.r < 128) {
		imgDst.putpixel(xDst,     yDst, color.white)
		imgDst.putpixel(xDst + 1, yDst, color.black)
		imgDst.putpixel(xDst,     yDst + 1, color.black)
		imgDst.putpixel(xDst + 1, yDst + 1, color.black)
	} elsif (c.r < 192) {
		imgDst.putpixel(xDst,     yDst, color.white)
		imgDst.putpixel(xDst + 1, yDst, color.black)
		imgDst.putpixel(xDst,     yDst + 1, color.white)
		imgDst.putpixel(xDst + 1, yDst + 1, color.black)
	} elsif (c.r < 255) {
		imgDst.putpixel(xDst,     yDst, color.white)
		imgDst.putpixel(xDst + 1, yDst, color.white)
		imgDst.putpixel(xDst,     yDst + 1, color.white)
		imgDst.putpixel(xDst + 1, yDst + 1, color.black)
	} else {
		imgDst.putpixel(xDst,     yDst, color.white)
		imgDst.putpixel(xDst + 1, yDst, color.white)
		imgDst.putpixel(xDst,     yDst + 1, color.white)
		imgDst.putpixel(xDst + 1, yDst + 1, color.white)
	}
}
if (cfg['show']) {
	imgDst.show()
	sys.exit()
}
nBits = 0
accum = 0
bytes = imgDst.scan():xiter {|c|
	accum = (accum << 1) + cond(c.r == 0, 0, 1)
	nBits += 1
	if (nBits == 8) {
		data = accum
		nBits = 0
		accum = 0
		data
	}
}
R'''
	; makeasm.gura -l ${cutLevelLow} -h ${cutLevelHigh} ${path.filename(fileNameSrc)}
	.org	0x1000

	pcgpage.page.store
	ldx	0xc100
	pcg.screen.putx
	ldx	0xc500
	pcg.screen.putattrx
infinite:
	bra	infinite
	
	.pcgpage page,cram:1,user:32
	.pcg	screen,32,24
	${format('0x%02x', bytes).fold(16):*join(',').each {|line|}}
	.db	${line}
	${end}
	.end
	.end
'''.template().render(fileNameDst)
//println('\t.db ', format('0x%02x', bytes).fold(16):*join(','))
sys.stderr.println(fileNameDst, ' was created')
